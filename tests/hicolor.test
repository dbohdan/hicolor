#! /usr/bin/env tclsh

package require Tcl 8.6-10
package require tcltest

cd [file dirname [info script]]

set hicolorCommand ../hicolor
if {[info exists env(HICOLOR_COMMAND)]} {
    set hicolorCommand $env(HICOLOR_COMMAND)
}

try {
    exec gm version
} on ok _ {
    tcltest::testConstraint gm true
} on error _ {}


proc hicolor args {
    exec {*}$::hicolorCommand {*}$args
}

proc read-file path {
    try {
        set ch [open $path rb]
        read $ch
    } finally {
        close $ch
    }
}

proc prefixes s {
    for {set i 0} {$i < [string length $s]} {incr i} {
        lappend prefixes [string range $s 0 $i]
    }

    return $prefixes
}


tcltest::test version-1.1 {} -body {
    hicolor version
} -match regexp -result {\d+\.\d+\.\d+}

tcltest::test version-1.2 {} -body {
    hicolor version file.hi5
} -returnCodes error -match glob -result {*too many arg*}

tcltest::test version-2.1 {} -body {
    set action version
    set output [hicolor $action]

    lmap prefix [prefixes $action] {
        expr {
            [hicolor $prefix] eq $output
        }
    }
} -match regexp -result {1(?: 1)+}


tcltest::test help-1.1 {} -body {
    hicolor help
} -match glob -result *options:*


tcltest::test help-1.2 {} -body {
    hicolor -h
} -match glob -result *options:*


tcltest::test help-1.3 {} -body {
    hicolor --help
} -match glob -result *options:*


tcltest::test encode-1.1 {} -body {
    hicolor encode
} -returnCodes error -match glob -result {*no source image given to command\
    "encode"*}

tcltest::test encode-1.2 {} -body {
    hicolor encode photo.png
} -result {}

tcltest::test encode-1.3 {} -body {
    hicolor encode photo.png photo.png.hic
} -result {}

tcltest::test encode-1.4 {} -body {
    hicolor encode photo.png photo.png.hic ascii.txt 2>@1
} -returnCodes error -match glob -result {*too many arg*}

tcltest::test encode-1.5 {} -body {
    hicolor encode photo.png photo.png.hic ascii.txt foo bar baz 2>@1
} -returnCodes error -match glob -result {*too many arg*}

tcltest::test encode-1.6 {} -body {
    hicolor encode [file tail [info script]]
} -returnCodes error -match glob -result {*incorrect file signature*}


tcltest::test encode-2.1 {encode flags} -body {
    hicolor encode -5 photo.png photo.png.hic
    hicolor info photo.png.hic
} -result {5 640 427}

tcltest::test encode-2.2 {encode flags} -body {
    hicolor encode --15-bit photo.png photo.png.hic
    hicolor info photo.png.hic
} -result {5 640 427}

tcltest::test encode-2.3 {encode flags} -body {
    hicolor encode -6 photo.png photo.png.hic
    hicolor info photo.png.hic
} -result {6 640 427}

tcltest::test encode-2.4 {encode flags} -body {
    hicolor encode --16-bit photo.png photo.png.hic
    hicolor info photo.png.hic
} -result {6 640 427}

tcltest::test encode-2.5 {encode flags} -body {
    hicolor encode --16-bit photo.png
    hicolor info photo.png.hic
} -result {6 640 427}

tcltest::test encode-2.6 {encode flags} -body {
    hicolor encode -5 -6 -5 photo.png
    hicolor info photo.png.hic
} -result {5 640 427}

tcltest::test encode-2.7 {encode flags} -body {
    hicolor encode -n -n -n -n -n photo.png
} -result {}

tcltest::test encode-2.8 {encode flags} -body {
    hicolor encode -6 -n -5 photo.png
    hicolor info photo.png.hic
} -result {5 640 427}


tcltest::test encode-3.1 {bad input} -body {
    hicolor encode truncated.png
} -returnCodes error -result {error: can't load PNG file "truncated.png":\
    corrupt zlib structure in DEFLATE stream}

tcltest::test encode-3.2 {bad input} -body {
    hicolor encode wrong-size.png
} -returnCodes error -match glob -result {error: can't load PNG file*}


hicolor encode --15-bit photo.png photo.hi5
hicolor encode --16-bit photo.png photo.hi6

tcltest::test decode-1.1 {15-bit} -body {
    hicolor decode photo.hi5
    file exists photo.hi5.png
} -result 1

tcltest::test decode-1.2 {16-bit} -body {
    hicolor decode photo.hi6
    file exists photo.hi6.png
} -result 1

tcltest::test decode-1.3 {bad input} -body {
    hicolor decode [file tail [info script]]
} -returnCodes error -match glob -result {*bad magic*}

tcltest::test decode-1.4 {bad input} -body {
    hicolor decode -5 photo.hi5
} -returnCodes error -match glob -result *error:*


tcltest::test quantize-1.1 {} -body {
    hicolor quantize photo.png photo.16-bit.png
} -result {}

tcltest::test quantize-1.2 {} -body {
    hicolor quantize -5 photo.png photo.15-bit.png
} -result {}


tcltest::test quantize-2.1 {bad input} -body {
    hicolor encode [file tail [info script]]
} -returnCodes error -match glob -result {*incorrect file signature*}

tcltest::test quantize-2.2 {bad input} -body {
    hicolor quantize truncated.png
} -returnCodes error -result {error: can't load PNG file "truncated.png":\
    corrupt zlib structure in DEFLATE stream}

tcltest::test quantize-2.3 {bad input} -body {
    hicolor quantize wrong-size.png
} -returnCodes error -match glob -result {error: can't load PNG file*}


tcltest::test unknown-command-1.1 {} -body {
    hicolor -5 src.png
} -returnCodes error -match glob -result {error: unknown command "-5"*}

tcltest::test unknown-command-1.2 {} -body {
    hicolor encoder
} -returnCodes error -match glob -result {error: unknown command "encoder"*}


tcltest::test unknown-option-1.1 {} -body {
    hicolor encode --wrong fo bar
} -returnCodes error -match glob -result {error: unknown option "--wrong"*}


tcltest::test no-arguments-1.1 {} -body {
    hicolor
} -returnCodes error -match glob -result *options:*


tcltest::test dash-dash-1.1 {} -body {
    hicolor encode -- --no-such-file
} -returnCodes error -match glob -result {error: source image "--no-such-file"\
    doesn't exist}


tcltest::test data-integrity-1.1 {roundtrip} -constraints gm -body {
    hicolor decode photo.hi5 temp.png
    exec gm compare -metric rmse photo.png temp.png
} -match regexp -result {Total: 0.0[12]}

tcltest::test data-integrity-2.1 {alpha roundtrip} -constraints gm -body {
    hicolor quant alpha.png alpha-q.png
    exec gm compare -metric rmse alpha.png alpha-q.png
} -match regexp -result {Total: 0.0+ }


incr failed [expr {$tcltest::numTests(Failed) > 0}]
tcltest::cleanupTests

if {$failed > 0} {
    exit 1
}
